{
  name ai-voice-tool,
  version 1.0.0,
  private true,
  scripts {
    dev next dev,
    build next build,
    start next start
  },
  dependencies {
    next 14.2.5,
    react 18.2.0,
    react-dom 18.2.0,
    openai ^4.0.0
  }
}

import { useState } from "react";

export default function Home() {
  const [text, setText] = useState("");
  const [audioUrl, setAudioUrl] = useState(null);
  const [loading, setLoading] = useState(false);

  const generateAudio = async () => {
    if (!text.trim()) return alert("Please enter some text!");
    setLoading(true);
    setAudioUrl(null);

    try {
      const res = await fetch("/api/tts", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text }),
      });

      if (!res.ok) throw new Error("TTS failed");
      const blob = await res.blob();
      const url = URL.createObjectURL(blob);
      setAudioUrl(url);
    } catch (e) {
      alert("Error: " + e.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: 600, margin: "40px auto", textAlign: "center" }}>
      <h1>AI Voice Tool</h1>
      <textarea
        rows={6}
        style={{ width: "100%", padding: "10px", fontSize: "16px" }}
        value={text}
        onChange={(e) => setText(e.target.value)}
        placeholder="Type text here..."
      />
      <br />
      <button
        onClick={generateAudio}
        disabled={loading}
        style={{ marginTop: "10px", padding: "10px 20px", fontSize: "16px" }}
      >
        {loading ? "Generating..." : "Generate Voice"}
      </button>
      {audioUrl && (
        <div style={{ marginTop: "20px" }}>
          <audio controls src={audioUrl}></audio>
          <br />
          <a href={audioUrl} download="voice.mp3">
            Download MP3
          </a>
        </div>
      )}
    </div>
  );
}


import OpenAI from "openai";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Only POST allowed" });
  }

  try {
    const { text } = req.body;
    if (!text || !text.trim()) {
      return res.status(400).send("Missing text");
    }

    const response = await openai.audio.speech.create({
      model: "gpt-4o-mini-tts",
      voice: "alloy",
      input: text,
      format: "mp3"
    });

    const arrayBuffer = await response.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    res.setHeader("Content-Type", "audio/mpeg");
    res.setHeader("Content-Disposition", "inline; filename=speech.mp3");
    res.send(buffer);
  } catch (err) {
    console.error(err);
    res.status(500).send("TTS error");
  }
}
